{
	"info": {
		"_postman_id": "2c49ddc5-5cbc-4b2e-b863-b7eb19dd3ad5",
		"name": "Book Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"userId\", response.userID);\r",
							"pm.environment.set(\"username\", response.username);\r",
							"\r",
							"// Validating response body.\r",
							"\r",
							"pm.test(\"Validating response body\", () => {\r",
							"    pm.expect(response.userID).to.be.a(\"string\");\r",
							"    pm.expect(response.username).to.be.a(\"string\");\r",
							"    pm.expect(response.books).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "ilich-garcia",
							"type": "string"
						},
						{
							"key": "password",
							"value": "Ilich.Garcia1!",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"{{$randomUserName}}\",\r\n    \"password\": \"Testing123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{demoQA}}/Account/v1/User",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validating response body.\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"if (response.token) {\r",
							"    pm.environment.set(\"accessToken\", response.token); // Sending \"accessToken\" to env variables.\r",
							"}\r",
							"\r",
							"pm.test(\"User is authorized\", function () {\r",
							"    pm.expect(response.status).to.eql(\"Success\");\r",
							"    pm.expect(response.result).to.eql(\"User authorized successfully.\");\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validating response body\", () => {\r",
							"    pm.expect(response.token).to.be.a(\"string\");\r",
							"    pm.expect(response.expires).to.be.a(\"string\");\r",
							"    pm.expect(response.status).to.be.a(\"string\");\r",
							"    pm.expect(response.result).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "ilich-garcia",
							"type": "string"
						},
						{
							"key": "password",
							"value": "Ilich.Garcia1!",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"{{username}}\",\r\n    \"password\": \"Testing123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{demoQA}}/Account/v1/GenerateToken",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validating response body.\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"User is authorized\", () => {\r",
							"    pm.expect(response).to.be.true;\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"{{username}}\",\r\n    \"password\": \"Testing123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{demoQA}}/Account/v1/Authorized",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"Account",
						"v1",
						"Authorized"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Book to My Books Collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Validating response body\", () => {\r",
							"    pm.expect(response.userId).to.be.a(\"string\");\r",
							"    pm.expect(response.collectionOfIsbn).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userId}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"9781491950296\"\r\n    },\r\n    {\r\n      \"isbn\": \"9781593277574\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{demoQA}}/BookStore/v1/Books",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Validating response body.\r",
							"\r",
							"pm.test(\"Validating response body\", () => {\r",
							"    pm.expect(response.books).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{demoQA}}/BookStore/v1/Books",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Validating response body.\r",
							"\r",
							"pm.test(\"Validating response body\", () => {\r",
							"    pm.expect(response.userId).to.be.a(\"string\");\r",
							"    pm.expect(response.username).to.be.a(\"string\");\r",
							"    pm.expect(response.books).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{demoQA}}/Account/v1/User/:userId",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Put Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Validating response body.\r",
							"\r",
							"pm.test(\"Validating response body\", () => {\r",
							"    pm.expect(response.userId).to.be.a(\"string\");\r",
							"    pm.expect(response.username).to.be.a(\"string\");\r",
							"    pm.expect(response.books).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Ilich.Garcia1!",
							"type": "string"
						},
						{
							"key": "username",
							"value": "ilich-garcia",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"isbn\": \"9781491950296\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{demoQA}}/BookStore/v1/Books/:ISBN",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books",
						":ISBN"
					],
					"variable": [
						{
							"key": "ISBN",
							"value": "9781491950296"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Status code is 204\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{demoQA}}/BookStore/v1/Books/?UserId={{userId}}",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books",
						""
					],
					"query": [
						{
							"key": "UserId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validating status code.\r",
							"\r",
							"pm.test(\"Successful DELETE request\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"\r",
							"// Validating response headers.\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection header is present\", () => {\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{demoQA}}/Account/v1/User/:UserId",
					"host": [
						"{{demoQA}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						":UserId"
					],
					"variable": [
						{
							"key": "UserId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}